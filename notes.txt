Structure:

    backend
        requirements.txt
        app.py
        services
            __init__.py
            fire_service.py
            satellite_service.py
    frontend
        public
            favicon.ico
            index.html
            logo192.png
            logo412.png
            manifest.json
            robots.txt (idk what this file is)
        src
            components
                FireList.jsx (List of active fires)
                Header.jsx  (Header on top of the map)
                MapComponent.jsx (The map itself)
                PredictionPanel.jsx (the side panel that shows more info + predictions)
                WildfireDashboard.jsx (the whole dashboard that puts the components together and outputs to the App.js)
            services
                fireApi.js (talks to Flask backend)
            utils
                helpers.js (not sure tbh)
            App.css
            App.js
            App.test.js
            index.css
            index.js
            logo.svg
            reportWebVitals.js
            setupTests.js
        package-lock-json
        package.json
        postcss.config.js
        tailwind.config.js
        README.md



hotspots:
{
  "hotspots": [
    {
      "id": 12345,
      "latitude": 34.5,
      "longitude": -118.2,
      "age": 2.5,
      "confidence": 85,
      "intensity": 150.2,
      "source": "MODIS"
    }
  ],
  "total": 1,
  "source": "MODIS",
  "timestamp": "2025-07-16T10:30:00"
}



import time
from time import localtime, strftime
import os

print('importing keras...')
import tensorflow as tf

import random
import numpy as np
print('done.')


try:
    from lib import preprocess
except:
    import preprocess


def fireCastModel(preProcessor, weightsFileName=None):
    if weightsFileName:
        fname = 'models/' + weightsFileName + ".h5"
        model = tf.keras.models.load_model(fname)
        return model


    kernelDiam = 2*preProcessor.AOIRadius+1
    nchannels = len(preProcessor.whichLayers) + 1
    wb = tf.keras.layers.Input((preProcessor.numWeatherInputs,),name='weatherInput')
    ib = tf.keras.layers.Input((kernelDiam, kernelDiam, nchannels),name='imageBranch')


    avg_pool = tf.keras.layers.AveragePooling2D(pool_size=(2,2), strides=(2,2))(ib)
    conv1 = tf.keras.layers.Conv2D(32, kernel_size=(3,3), strides=(1,1), activation='sigmoid')(avg_pool)
    pool_1 = tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2))(conv1)
    d_1 = tf.keras.layers.Dropout(0.5)(pool_1)
    conv2 = tf.keras.layers.Conv2D(64, (3,3), activation='relu')(d_1)
    pool_2 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv2)
    d_2 = tf.keras.layers.Dropout(0.5)(pool_2)
    flat = tf.keras.layers.Flatten()(d_2)
    fc_1 = tf.keras.layers.Dense(128, activation='relu')(flat)
    d_3 = tf.keras.layers.Dropout(0.5)(fc_1)
    # --------

    concat = tf.keras.layers.Concatenate(name='mergedBranches')([wb,d_3]) #self.ib.output
    out = tf.keras.layers.Dense(1, kernel_initializer = 'normal', activation = 'sigmoid',name='output')(concat)
    model = tf.keras.models.Model([wb, ib], out)

    model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

    return model


def fireCastFit(mod, preProcessor, training, validate, epochs=25):
    (tinputs, toutputs), ptList = preProcessor.process(training)
    (vinputs, voutputs), ptList = preProcessor.process(validate)

    mod.fit(tinputs, toutputs, batch_size = 32, epochs=epochs, validation_data=(vinputs, voutputs)) #, callbacks=[es]

    time_string = time.strftime("%Y%m%d-%H%M%S")
    fname = 'models/'+time_string + 'mod.h5'
    mod.save(fname)

def fireCastPredict(mod, preProcessor, dataset, mode):
    print('start predict')
    (inputs, outputs), ptList = preProcessor.process(dataset)
    results = mod.predict(inputs).flatten()
    if mode:
        resultDict = {pt:random.uniform(0.0,1.0) for (pt, pred) in zip(ptList, results)}
    else:
        resultDict = {pt:pred for (pt, pred) in zip(ptList, results)}
    print("end predict")
    return resultDict, results
