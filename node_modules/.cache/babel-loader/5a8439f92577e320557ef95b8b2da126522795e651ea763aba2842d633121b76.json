{"ast":null,"code":"// ========================================================================================================================================\n// This is where you would get the predictions from the model\n// ========================================================================================================================================\nconst fetchPrediction = async (fireId, fireData) => {\n  if (!fireData) {\n    console.error('No fire data provided');\n    return;\n  }\n  setLoading(true);\n  try {\n    // Call your backend API\n    const response = await fetch('http://localhost:5000/predict', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fireId: fireId,\n        ...fireData\n      })\n    });\n    const result = await response.json();\n    if (result.success) {\n      const prediction = {\n        fireId: fireId,\n        predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n        confidence: Math.floor(Math.random() * 20) + 75,\n        riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n        currentPerimeter: [[fireData.lat + 0.005, fireData.lng + 0.005], [fireData.lat + 0.008, fireData.lng + 0.002], [fireData.lat + 0.006, fireData.lng - 0.005], [fireData.lat - 0.002, fireData.lng - 0.008], [fireData.lat - 0.005, fireData.lng + 0.002]],\n        predictedPerimeter: [[fireData.lat + 0.01, fireData.lng + 0.01], [fireData.lat + 0.02, fireData.lng + 0.005], [fireData.lat + 0.015, fireData.lng - 0.01], [fireData.lat - 0.005, fireData.lng - 0.015], [fireData.lat - 0.01, fireData.lng + 0.005]],\n        // Add the images from the model\n        currentPerimeterImage: result.currentImage,\n        predictedPerimeterImage: result.predictedImage,\n        modelData: result.prediction_data\n      };\n      setPrediction(prediction);\n      setShowPrediction(true);\n\n      // Add map overlays\n      if (mapInstanceRef.current) {\n        addPerimeterOverlays(mapInstanceRef.current, window.L, prediction);\n      }\n    } else {\n      console.error('Prediction failed:', result.error);\n      // Fallback to mock data\n      const mockPrediction = {\n        fireId: fireId,\n        predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n        confidence: Math.floor(Math.random() * 20) + 75,\n        riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n        currentPerimeter: [[fireData.lat + 0.005, fireData.lng + 0.005], [fireData.lat + 0.008, fireData.lng + 0.002], [fireData.lat + 0.006, fireData.lng - 0.005], [fireData.lat - 0.002, fireData.lng - 0.008], [fireData.lat - 0.005, fireData.lng + 0.002]],\n        predictedPerimeter: [[fireData.lat + 0.01, fireData.lng + 0.01], [fireData.lat + 0.02, fireData.lng + 0.005], [fireData.lat + 0.015, fireData.lng - 0.01], [fireData.lat - 0.005, fireData.lng - 0.015], [fireData.lat - 0.01, fireData.lng + 0.005]]\n      };\n      setPrediction(mockPrediction);\n      setShowPrediction(true);\n\n      // Add map overlays\n      if (mapInstanceRef.current) {\n        addPerimeterOverlays(mapInstanceRef.current, window.L, mockPrediction);\n      }\n    }\n  } catch (error) {\n    console.error('Error fetching prediction:', error);\n    // Fallback to mock data\n    const mockPrediction = {\n      fireId: fireId,\n      predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n      confidence: Math.floor(Math.random() * 20) + 75,\n      riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n      currentPerimeter: [[fireData.lat + 0.005, fireData.lng + 0.005], [fireData.lat + 0.008, fireData.lng + 0.002], [fireData.lat + 0.006, fireData.lng - 0.005], [fireData.lat - 0.002, fireData.lng - 0.008], [fireData.lat - 0.005, fireData.lng + 0.002]],\n      predictedPerimeter: [[fireData.lat + 0.01, fireData.lng + 0.01], [fireData.lat + 0.02, fireData.lng + 0.005], [fireData.lat + 0.015, fireData.lng - 0.01], [fireData.lat - 0.005, fireData.lng - 0.015], [fireData.lat - 0.01, fireData.lng + 0.005]]\n    };\n    setPrediction(mockPrediction);\n    setShowPrediction(true);\n\n    // Add map overlays\n    if (mapInstanceRef.current) {\n      addPerimeterOverlays(mapInstanceRef.current, window.L, mockPrediction);\n    }\n  }\n  setLoading(false);\n};","map":{"version":3,"names":["fetchPrediction","fireId","fireData","console","error","setLoading","response","fetch","method","headers","body","JSON","stringify","result","json","success","prediction","predictionDate","Date","now","toISOString","estimatedSize","size","Math","random","confidence","floor","riskLevel","currentPerimeter","lat","lng","predictedPerimeter","currentPerimeterImage","currentImage","predictedPerimeterImage","predictedImage","modelData","prediction_data","setPrediction","setShowPrediction","mapInstanceRef","current","addPerimeterOverlays","window","L","mockPrediction"],"sources":["/Users/timothyha/firecast/src/WildfireDashboard.jsx"],"sourcesContent":["// ========================================================================================================================================\n  // This is where you would get the predictions from the model\n  // ========================================================================================================================================\n  const fetchPrediction = async (fireId, fireData) => {\n    if (!fireData) {\n      console.error('No fire data provided');\n      return;\n    }\n    \n    setLoading(true);\n    \n    try {\n      // Call your backend API\n      const response = await fetch('http://localhost:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fireId: fireId,\n          ...fireData\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        const prediction = {\n          fireId: fireId,\n          predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n          estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n          confidence: Math.floor(Math.random() * 20) + 75,\n          riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n          currentPerimeter: [\n            [fireData.lat + 0.005, fireData.lng + 0.005],\n            [fireData.lat + 0.008, fireData.lng + 0.002],\n            [fireData.lat + 0.006, fireData.lng - 0.005],\n            [fireData.lat - 0.002, fireData.lng - 0.008],\n            [fireData.lat - 0.005, fireData.lng + 0.002]\n          ],\n          predictedPerimeter: [\n            [fireData.lat + 0.01, fireData.lng + 0.01],\n            [fireData.lat + 0.02, fireData.lng + 0.005],\n            [fireData.lat + 0.015, fireData.lng - 0.01],\n            [fireData.lat - 0.005, fireData.lng - 0.015],\n            [fireData.lat - 0.01, fireData.lng + 0.005]\n          ],\n          // Add the images from the model\n          currentPerimeterImage: result.currentImage,\n          predictedPerimeterImage: result.predictedImage,\n          modelData: result.prediction_data\n        };\n        \n        setPrediction(prediction);\n        setShowPrediction(true);\n        \n        // Add map overlays\n        if (mapInstanceRef.current) {\n          addPerimeterOverlays(mapInstanceRef.current, window.L, prediction);\n        }\n      } else {\n        console.error('Prediction failed:', result.error);\n        // Fallback to mock data\n        const mockPrediction = {\n          fireId: fireId,\n          predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n          estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n          confidence: Math.floor(Math.random() * 20) + 75,\n          riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n          currentPerimeter: [\n            [fireData.lat + 0.005, fireData.lng + 0.005],\n            [fireData.lat + 0.008, fireData.lng + 0.002],\n            [fireData.lat + 0.006, fireData.lng - 0.005],\n            [fireData.lat - 0.002, fireData.lng - 0.008],\n            [fireData.lat - 0.005, fireData.lng + 0.002]\n          ],\n          predictedPerimeter: [\n            [fireData.lat + 0.01, fireData.lng + 0.01],\n            [fireData.lat + 0.02, fireData.lng + 0.005],\n            [fireData.lat + 0.015, fireData.lng - 0.01],\n            [fireData.lat - 0.005, fireData.lng - 0.015],\n            [fireData.lat - 0.01, fireData.lng + 0.005]\n          ]\n        };\n        setPrediction(mockPrediction);\n        setShowPrediction(true);\n        \n        // Add map overlays\n        if (mapInstanceRef.current) {\n          addPerimeterOverlays(mapInstanceRef.current, window.L, mockPrediction);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching prediction:', error);\n      // Fallback to mock data\n      const mockPrediction = {\n        fireId: fireId,\n        predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n        confidence: Math.floor(Math.random() * 20) + 75,\n        riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n        currentPerimeter: [\n          [fireData.lat + 0.005, fireData.lng + 0.005],\n          [fireData.lat + 0.008, fireData.lng + 0.002],\n          [fireData.lat + 0.006, fireData.lng - 0.005],\n          [fireData.lat - 0.002, fireData.lng - 0.008],\n          [fireData.lat - 0.005, fireData.lng + 0.002]\n        ],\n        predictedPerimeter: [\n          [fireData.lat + 0.01, fireData.lng + 0.01],\n          [fireData.lat + 0.02, fireData.lng + 0.005],\n          [fireData.lat + 0.015, fireData.lng - 0.01],\n          [fireData.lat - 0.005, fireData.lng - 0.015],\n          [fireData.lat - 0.01, fireData.lng + 0.005]\n        ]\n      };\n      setPrediction(mockPrediction);\n      setShowPrediction(true);\n      \n      // Add map overlays\n      if (mapInstanceRef.current) {\n        addPerimeterOverlays(mapInstanceRef.current, window.L, mockPrediction);\n      }\n    }\n    \n    setLoading(false);\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}