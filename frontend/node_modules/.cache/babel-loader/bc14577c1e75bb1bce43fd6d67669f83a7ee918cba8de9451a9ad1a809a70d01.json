{"ast":null,"code":"var _jsxFileName = \"/home/turtle09/FlameFlux/frontend/src/components/WildfireDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport Header from './Header';\nimport MapComponent from './MapComponent';\nimport FireList from './FireList';\nimport PredictionPanel from './PredictionPanel';\nimport LayersControl from './LayersControl';\nimport { fetchRealTimeFireData, fetchPrediction } from '../services/fireApiDirect';\nimport { fetchSatelliteData } from '../services/satelliteApiDirect';\nimport { loadFirePredictionCSV } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WildfireDashboard = () => {\n  _s();\n  const mapRef = useRef();\n  // State management\n  const [fires, setFires] = useState([]);\n  const [selectedFire, setSelectedFire] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showPrediction, setShowPrediction] = useState(false);\n  const [mapLayer, setMapLayer] = useState('satellite');\n  const [dataError, setDataError] = useState(null);\n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [firePredictionData, setFirePredictionData] = useState(null);\n  const [predictionLoading, setPredictionLoading] = useState(false);\n  const [showPredictionMarkers, setShowPredictionMarkers] = useState(false);\n\n  // Satellite data state\n  const [satelliteLayers, setSatelliteLayers] = useState({\n    viirs: {\n      enabled: false,\n      data: []\n    },\n    modis: {\n      enabled: false,\n      data: []\n    },\n    viewMode: 'markers' // 'markers' or 'heatmap'\n  });\n  const [isLoadingSatelliteData, setIsLoadingSatelliteData] = useState({\n    viirs: false,\n    modis: false\n  });\n  const loadFireData = useCallback(async () => {\n    try {\n      setIsLoadingData(true);\n      setDataError(null);\n      const realTimeFireData = await fetchRealTimeFireData();\n      setFires(realTimeFireData);\n      console.log('Fire data loaded successfully:', realTimeFireData.length, 'fires');\n    } catch (error) {\n      console.error('Failed to load real-time fire data:', error);\n      setDataError(error.message);\n      setFires([]);\n    } finally {\n      setIsLoadingData(false);\n    }\n  }, []);\n  const loadSatelliteData = useCallback(async () => {\n    try {\n      // Load VIIRS data\n      setIsLoadingSatelliteData(prev => ({\n        ...prev,\n        viirs: true\n      }));\n      const viirsData = await fetchSatelliteData('VIIRS');\n\n      // Load MODIS data\n      setIsLoadingSatelliteData(prev => ({\n        ...prev,\n        modis: true\n      }));\n      const modisData = await fetchSatelliteData('MODIS');\n      setSatelliteLayers(prev => ({\n        ...prev,\n        viirs: {\n          ...prev.viirs,\n          data: viirsData\n        },\n        modis: {\n          ...prev.modis,\n          data: modisData\n        }\n      }));\n      console.log('Satellite data loaded successfully:', {\n        viirs: viirsData.length,\n        modis: modisData.length\n      });\n    } catch (error) {\n      console.error('Failed to load satellite data:', error);\n      // Don't set dataError for satellite data as it's supplementary\n    } finally {\n      setIsLoadingSatelliteData({\n        viirs: false,\n        modis: false\n      });\n    }\n  }, []);\n\n  // Load fire prediction data for selected fire\n  const loadFirePrediction = useCallback(async fire => {\n    if (!fire) {\n      setFirePredictionData(null);\n      return;\n    }\n\n    // Check if fire is too small\n    if (fire.size < 100) {\n      setFirePredictionData(null);\n      return;\n    }\n    setPredictionLoading(true);\n    try {\n      const csvData = await loadFirePredictionCSV(fire.name);\n      if (csvData && csvData.length > 0) {\n        console.log(`Loaded prediction data for ${fire.name}:`, csvData.length, 'points');\n        setFirePredictionData(csvData);\n      } else {\n        console.log(`No prediction data available for ${fire.name}`);\n        setFirePredictionData(null);\n      }\n    } catch (error) {\n      console.error(`Failed to load prediction data for ${fire.name}:`, error);\n      setFirePredictionData(null);\n    } finally {\n      setPredictionLoading(false);\n    }\n  }, []);\n\n  // Clear prediction data when no fire is selected\n  const clearFirePrediction = useCallback(() => {\n    setFirePredictionData(null);\n    setShowPredictionMarkers(false);\n  }, []);\n\n  // Toggle prediction markers on map\n  const handleTogglePrediction = useCallback(() => {\n    if (firePredictionData && firePredictionData.length > 0) {\n      setShowPredictionMarkers(prev => !prev);\n    }\n  }, [firePredictionData]);\n\n  // Load fire data on component mount\n  useEffect(() => {\n    loadFireData();\n    loadSatelliteData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty dependency array since these functions are stable\n\n  const handleFireClick = useCallback(async fire => {\n    console.log('handleFireClick called with:', fire);\n    setSelectedFire(fire);\n    setLoading(true);\n    setShowPrediction(true);\n\n    // Clear previous prediction data\n    clearFirePrediction();\n\n    // Zoom to fire perimeter\n    if (fire && fire.geometry && mapRef.current && mapRef.current.zoomToFire) {\n      console.log('Attempting to zoom to fire:', fire.name);\n      mapRef.current.zoomToFire(fire);\n    } else {\n      console.log('No geometry found for fire or mapRef not ready:', fire);\n    }\n\n    // Load fire prediction data (no await since we don't want to block the UI)\n    loadFirePrediction(fire);\n\n    // No longer need the old prediction API call since we removed the 24-hour prediction box\n    setPrediction(null);\n    setLoading(false);\n  }, [loadFirePrediction, clearFirePrediction]);\n  const refreshData = useCallback(async () => {\n    await Promise.all([loadFireData(), loadSatelliteData()]);\n  }, [loadFireData, loadSatelliteData]);\n\n  // Handle satellite layer toggle\n  const handleLayerToggle = useCallback(satellite => {\n    setSatelliteLayers(prev => ({\n      ...prev,\n      [satellite]: {\n        ...prev[satellite],\n        enabled: !prev[satellite].enabled\n      }\n    }));\n  }, []);\n\n  // Handle view mode change\n  const handleViewModeChange = useCallback(mode => {\n    setSatelliteLayers(prev => ({\n      ...prev,\n      viewMode: mode\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen flex flex-col bg-gray-900 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      mapLayer: mapLayer,\n      setMapLayer: setMapLayer,\n      refreshData: refreshData,\n      isLoadingData: isLoadingData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-1 overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 relative\",\n        children: [/*#__PURE__*/_jsxDEV(MapComponent, {\n          ref: mapRef,\n          fires: fires,\n          mapLayer: mapLayer,\n          onFireClick: handleFireClick,\n          satelliteLayers: satelliteLayers,\n          firePredictionData: showPredictionMarkers ? firePredictionData : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FireList, {\n          fires: fires,\n          handleFireClick: handleFireClick,\n          isLoadingData: isLoadingData,\n          dataError: dataError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LayersControl, {\n          satelliteLayers: satelliteLayers,\n          onLayerToggle: handleLayerToggle,\n          onViewModeChange: handleViewModeChange,\n          isLoadingSatelliteData: isLoadingSatelliteData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PredictionPanel, {\n        showPrediction: showPrediction,\n        setShowPrediction: setShowPrediction,\n        loading: loading,\n        selectedFire: selectedFire,\n        prediction: prediction,\n        firePredictionData: firePredictionData,\n        predictionLoading: predictionLoading,\n        onTogglePrediction: handleTogglePrediction,\n        showPredictionMarkers: showPredictionMarkers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(WildfireDashboard, \"g6JF4jkhdyjtcrGnwJ9f4XrRjS4=\");\n_c = WildfireDashboard;\nexport default WildfireDashboard;\nvar _c;\n$RefreshReg$(_c, \"WildfireDashboard\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","Header","MapComponent","FireList","PredictionPanel","LayersControl","fetchRealTimeFireData","fetchPrediction","fetchSatelliteData","loadFirePredictionCSV","jsxDEV","_jsxDEV","WildfireDashboard","_s","mapRef","fires","setFires","selectedFire","setSelectedFire","prediction","setPrediction","loading","setLoading","showPrediction","setShowPrediction","mapLayer","setMapLayer","dataError","setDataError","isLoadingData","setIsLoadingData","firePredictionData","setFirePredictionData","predictionLoading","setPredictionLoading","showPredictionMarkers","setShowPredictionMarkers","satelliteLayers","setSatelliteLayers","viirs","enabled","data","modis","viewMode","isLoadingSatelliteData","setIsLoadingSatelliteData","loadFireData","realTimeFireData","console","log","length","error","message","loadSatelliteData","prev","viirsData","modisData","loadFirePrediction","fire","size","csvData","name","clearFirePrediction","handleTogglePrediction","handleFireClick","geometry","current","zoomToFire","refreshData","Promise","all","handleLayerToggle","satellite","handleViewModeChange","mode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onFireClick","onLayerToggle","onViewModeChange","onTogglePrediction","_c","$RefreshReg$"],"sources":["/home/turtle09/FlameFlux/frontend/src/components/WildfireDashboard.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\nimport Header from './Header';\nimport MapComponent from './MapComponent';\nimport FireList from './FireList';\nimport PredictionPanel from './PredictionPanel';\nimport LayersControl from './LayersControl';\nimport { fetchRealTimeFireData, fetchPrediction } from '../services/fireApiDirect';\nimport { fetchSatelliteData } from '../services/satelliteApiDirect';\nimport { loadFirePredictionCSV } from '../utils/helpers';\n\nconst WildfireDashboard = () => {\n  const mapRef = useRef();\n  // State management\n  const [fires, setFires] = useState([]);\n  const [selectedFire, setSelectedFire] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showPrediction, setShowPrediction] = useState(false);\n  const [mapLayer, setMapLayer] = useState('satellite');\n  const [dataError, setDataError] = useState(null);\n  const [isLoadingData, setIsLoadingData] = useState(true);\n  const [firePredictionData, setFirePredictionData] = useState(null);\n  const [predictionLoading, setPredictionLoading] = useState(false);\n  const [showPredictionMarkers, setShowPredictionMarkers] = useState(false);\n\n  // Satellite data state\n  const [satelliteLayers, setSatelliteLayers] = useState({\n    viirs: {\n      enabled: false,\n      data: []\n    },\n    modis: {\n      enabled: false,\n      data: []\n    },\n    viewMode: 'markers' // 'markers' or 'heatmap'\n  });\n\n  const [isLoadingSatelliteData, setIsLoadingSatelliteData] = useState({\n    viirs: false,\n    modis: false\n  });\n\n  const loadFireData = useCallback(async () => {\n    try {\n      setIsLoadingData(true);\n      setDataError(null);\n      const realTimeFireData = await fetchRealTimeFireData();\n      setFires(realTimeFireData);\n      console.log('Fire data loaded successfully:', realTimeFireData.length, 'fires');\n    } catch (error) {\n      console.error('Failed to load real-time fire data:', error);\n      setDataError(error.message);\n      setFires([]);\n    } finally {\n      setIsLoadingData(false);\n    }\n  }, []);\n\n  const loadSatelliteData = useCallback(async () => {\n    try {\n              // Load VIIRS data\n        setIsLoadingSatelliteData(prev => ({ ...prev, viirs: true }));\n        const viirsData = await fetchSatelliteData('VIIRS');\n        \n        // Load MODIS data\n        setIsLoadingSatelliteData(prev => ({ ...prev, modis: true }));\n        const modisData = await fetchSatelliteData('MODIS');\n\n      setSatelliteLayers(prev => ({\n        ...prev,\n        viirs: {\n          ...prev.viirs,\n          data: viirsData\n        },\n        modis: {\n          ...prev.modis,\n          data: modisData\n        }\n      }));\n\n      console.log('Satellite data loaded successfully:', {\n        viirs: viirsData.length,\n        modis: modisData.length\n      });\n    } catch (error) {\n      console.error('Failed to load satellite data:', error);\n      // Don't set dataError for satellite data as it's supplementary\n    } finally {\n      setIsLoadingSatelliteData({\n        viirs: false,\n        modis: false\n      });\n    }\n  }, []);\n\n  // Load fire prediction data for selected fire\n  const loadFirePrediction = useCallback(async (fire) => {\n    if (!fire) {\n      setFirePredictionData(null);\n      return;\n    }\n\n    // Check if fire is too small\n    if (fire.size < 100) {\n      setFirePredictionData(null);\n      return;\n    }\n\n    setPredictionLoading(true);\n    try {\n      const csvData = await loadFirePredictionCSV(fire.name);\n      if (csvData && csvData.length > 0) {\n        console.log(`Loaded prediction data for ${fire.name}:`, csvData.length, 'points');\n        setFirePredictionData(csvData);\n      } else {\n        console.log(`No prediction data available for ${fire.name}`);\n        setFirePredictionData(null);\n      }\n    } catch (error) {\n      console.error(`Failed to load prediction data for ${fire.name}:`, error);\n      setFirePredictionData(null);\n    } finally {\n      setPredictionLoading(false);\n    }\n  }, []);\n\n  // Clear prediction data when no fire is selected\n  const clearFirePrediction = useCallback(() => {\n    setFirePredictionData(null);\n    setShowPredictionMarkers(false);\n  }, []);\n\n  // Toggle prediction markers on map\n  const handleTogglePrediction = useCallback(() => {\n    if (firePredictionData && firePredictionData.length > 0) {\n      setShowPredictionMarkers(prev => !prev);\n    }\n  }, [firePredictionData]);\n\n  // Load fire data on component mount\n  useEffect(() => {\n    loadFireData();\n    loadSatelliteData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty dependency array since these functions are stable\n\n  const handleFireClick = useCallback(async (fire) => {\n    console.log('handleFireClick called with:', fire);\n    setSelectedFire(fire);\n    setLoading(true);\n    setShowPrediction(true);\n    \n    // Clear previous prediction data\n    clearFirePrediction();\n    \n    // Zoom to fire perimeter\n    if (fire && fire.geometry && mapRef.current && mapRef.current.zoomToFire) {\n      console.log('Attempting to zoom to fire:', fire.name);\n      mapRef.current.zoomToFire(fire);\n    } else {\n      console.log('No geometry found for fire or mapRef not ready:', fire);\n    }\n    \n    // Load fire prediction data (no await since we don't want to block the UI)\n    loadFirePrediction(fire);\n    \n    // No longer need the old prediction API call since we removed the 24-hour prediction box\n    setPrediction(null);\n    setLoading(false);\n  }, [loadFirePrediction, clearFirePrediction]);\n\n\n\n  const refreshData = useCallback(async () => {\n    await Promise.all([\n      loadFireData(),\n      loadSatelliteData()\n    ]);\n  }, [loadFireData, loadSatelliteData]);\n\n  // Handle satellite layer toggle\n  const handleLayerToggle = useCallback((satellite) => {\n    setSatelliteLayers(prev => ({\n      ...prev,\n      [satellite]: {\n        ...prev[satellite],\n        enabled: !prev[satellite].enabled\n      }\n    }));\n  }, []);\n\n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setSatelliteLayers(prev => ({\n      ...prev,\n      viewMode: mode\n    }));\n  }, []);\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-900 text-white\">\n      <Header \n        mapLayer={mapLayer}\n        setMapLayer={setMapLayer}\n        refreshData={refreshData}\n        isLoadingData={isLoadingData}\n      />\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Map section */}\n        <div className=\"flex-1 relative\">\n          <MapComponent \n            ref={mapRef}\n            fires={fires}\n            mapLayer={mapLayer}\n            onFireClick={handleFireClick}\n            satelliteLayers={satelliteLayers}\n            firePredictionData={showPredictionMarkers ? firePredictionData : null}\n          />\n          \n          <FireList \n            fires={fires}\n            handleFireClick={handleFireClick}\n            isLoadingData={isLoadingData}\n            dataError={dataError}\n          />\n\n          {/* Layers Control */}\n          <LayersControl\n            satelliteLayers={satelliteLayers}\n            onLayerToggle={handleLayerToggle}\n            onViewModeChange={handleViewModeChange}\n            isLoadingSatelliteData={isLoadingSatelliteData}\n          />\n        </div>\n\n        {/* Prediction panel */}\n        <PredictionPanel \n          showPrediction={showPrediction}\n          setShowPrediction={setShowPrediction}\n          loading={loading}\n          selectedFire={selectedFire}\n          prediction={prediction}\n          firePredictionData={firePredictionData}\n          predictionLoading={predictionLoading}\n          onTogglePrediction={handleTogglePrediction}\n          showPredictionMarkers={showPredictionMarkers}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default WildfireDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}