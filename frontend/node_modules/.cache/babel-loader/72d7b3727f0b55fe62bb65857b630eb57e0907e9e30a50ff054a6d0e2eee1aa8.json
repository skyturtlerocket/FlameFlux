{"ast":null,"code":"// API calls to Flask backend\nexport const fetchRealTimeFireData=async()=>{try{console.log(\"Fetching real-time fire data from Flask backend...\");const response=await fetch('http://localhost:5000/api/fires',{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json'}});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();console.log(`Received ${data.total||0} fires from backend`);return data.fires||[];}catch(error){console.error('Failed to fetch fire data from backend:',error);throw error;}};// Mock prediction service - replace with actual model API call\nexport const fetchPrediction=async(fireId,fireData)=>{if(!fireData){console.error('No fire data provided');return null;}// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,2000));// Mock data - replace with actual model prediction\nconst mockPrediction={fireId:fireId,predictionDate:new Date(Date.now()+24*60*60*1000).toISOString(),estimatedSize:fireData.size*(1.2+Math.random()*0.8),confidence:Math.floor(Math.random()*20)+75,riskLevel:Math.random()>0.5?'High':'Critical',perimeter:[[fireData.lat+0.01,fireData.lng+0.01],[fireData.lat+0.02,fireData.lng+0.005],[fireData.lat+0.015,fireData.lng-0.01],[fireData.lat-0.005,fireData.lng-0.015],[fireData.lat-0.01,fireData.lng+0.005]]};return mockPrediction;};","map":{"version":3,"names":["fetchRealTimeFireData","console","log","response","fetch","method","headers","ok","Error","status","data","json","total","fires","error","fetchPrediction","fireId","fireData","Promise","resolve","setTimeout","mockPrediction","predictionDate","Date","now","toISOString","estimatedSize","size","Math","random","confidence","floor","riskLevel","perimeter","lat","lng"],"sources":["/Users/timothyha/firecast/frontend/src/services/fireApi.js"],"sourcesContent":["// API calls to Flask backend\n\nexport const fetchRealTimeFireData = async () => {\n    try {\n      console.log(\"Fetching real-time fire data from Flask backend...\");\n      \n      const response = await fetch('http://localhost:5000/api/fires', {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      console.log(`Received ${data.total || 0} fires from backend`);\n      \n      return data.fires || [];\n    } catch (error) {\n      console.error('Failed to fetch fire data from backend:', error);\n      throw error;\n    }\n  };\n  \n  // Mock prediction service - replace with actual model API call\n  export const fetchPrediction = async (fireId, fireData) => {\n    if (!fireData) {\n      console.error('No fire data provided');\n      return null;\n    }\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Mock data - replace with actual model prediction\n    const mockPrediction = {\n      fireId: fireId,\n      predictionDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      estimatedSize: fireData.size * (1.2 + Math.random() * 0.8),\n      confidence: Math.floor(Math.random() * 20) + 75,\n      riskLevel: Math.random() > 0.5 ? 'High' : 'Critical',\n      perimeter: [\n        [fireData.lat + 0.01, fireData.lng + 0.01],\n        [fireData.lat + 0.02, fireData.lng + 0.005],\n        [fireData.lat + 0.015, fireData.lng - 0.01],\n        [fireData.lat - 0.005, fireData.lng - 0.015],\n        [fireData.lat - 0.01, fireData.lng + 0.005]\n      ]\n    };\n    \n    return mockPrediction;\n  };"],"mappings":"AAAA;AAEA,MAAO,MAAM,CAAAA,qBAAqB,CAAG,KAAAA,CAAA,GAAY,CAC7C,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC,CAEjE,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iCAAiC,CAAE,CAC9DC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC,CAC3D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAElCV,OAAO,CAACC,GAAG,CAAC,YAAYQ,IAAI,CAACE,KAAK,EAAI,CAAC,qBAAqB,CAAC,CAE7D,MAAO,CAAAF,IAAI,CAACG,KAAK,EAAI,EAAE,CACzB,CAAE,MAAOC,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,yCAAyC,CAAEA,KAAK,CAAC,CAC/D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAAA,CAAOC,MAAM,CAAEC,QAAQ,GAAK,CACzD,GAAI,CAACA,QAAQ,CAAE,CACbhB,OAAO,CAACa,KAAK,CAAC,uBAAuB,CAAC,CACtC,MAAO,KAAI,CACb,CAEA;AACA,KAAM,IAAI,CAAAI,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,KAAM,CAAAE,cAAc,CAAG,CACrBL,MAAM,CAAEA,MAAM,CACdM,cAAc,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CACxEC,aAAa,CAAET,QAAQ,CAACU,IAAI,EAAI,GAAG,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CAC1DC,UAAU,CAAEF,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,EAAE,CAC/CG,SAAS,CAAEJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAG,MAAM,CAAG,UAAU,CACpDI,SAAS,CAAE,CACT,CAAChB,QAAQ,CAACiB,GAAG,CAAG,IAAI,CAAEjB,QAAQ,CAACkB,GAAG,CAAG,IAAI,CAAC,CAC1C,CAAClB,QAAQ,CAACiB,GAAG,CAAG,IAAI,CAAEjB,QAAQ,CAACkB,GAAG,CAAG,KAAK,CAAC,CAC3C,CAAClB,QAAQ,CAACiB,GAAG,CAAG,KAAK,CAAEjB,QAAQ,CAACkB,GAAG,CAAG,IAAI,CAAC,CAC3C,CAAClB,QAAQ,CAACiB,GAAG,CAAG,KAAK,CAAEjB,QAAQ,CAACkB,GAAG,CAAG,KAAK,CAAC,CAC5C,CAAClB,QAAQ,CAACiB,GAAG,CAAG,IAAI,CAAEjB,QAAQ,CAACkB,GAAG,CAAG,KAAK,CAAC,CAE/C,CAAC,CAED,MAAO,CAAAd,cAAc,CACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}