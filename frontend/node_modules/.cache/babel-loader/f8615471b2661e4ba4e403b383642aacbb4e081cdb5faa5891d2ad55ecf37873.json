{"ast":null,"code":"// Direct API calls for satellite hotspot data (bypassing Flask backend)\n\nconst MODIS_API = \"https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/MODIS_Thermal_v1/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\";\nconst VIIRS_API = \"https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/Satellite_VIIRS_Thermal_Hotspots_and_Fire_Activity/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\";\nconst headers = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\nconst isInUSA = (lat, lon) => {\n  return 24.396308 <= lat && lat <= 49.384358 && -125.0 <= lon && lon <= -66.93457 || 51.2 <= lat && lat <= 71.5 && -179.15 <= lon && lon <= -129.97 || 18.5 <= lat && lat <= 22.5 && -160.5 <= lon && lon <= -154.5;\n};\nexport const fetchMODISData = async () => {\n  try {\n    console.log(\"Fetching MODIS satellite data directly from ArcGIS API...\");\n    const response = await fetch(MODIS_API, {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    const features = data.features || [];\n    const modisHotspots = [];\n    for (let idx = 0; idx < features.length; idx++) {\n      const val = features[idx];\n      const id = val.id;\n      const props = val.properties;\n      const lat = val.geometry.coordinates[1];\n      const lng = val.geometry.coordinates[0];\n\n      // Check if it's in USA bounds\n      if (!isInUSA(lat, lng)) {\n        continue;\n      }\n      const age = props.HOURS_OLD;\n      const confidence = props.CONFIDENCE;\n\n      // Filter by confidence\n      if (confidence < 80) {\n        continue;\n      }\n      const intensity = props.FRP;\n      const hotspot = {\n        id: id,\n        latitude: lat,\n        longitude: lng,\n        age: age,\n        confidence: confidence,\n        intensity: intensity,\n        source: \"MODIS\"\n      };\n      modisHotspots.push(hotspot);\n    }\n    console.log(`Received ${modisHotspots.length} MODIS hotspots`);\n    return modisHotspots;\n  } catch (error) {\n    console.error('Failed to fetch MODIS satellite data:', error);\n    throw error;\n  }\n};\nexport const fetchVIIRSData = async () => {\n  try {\n    console.log(\"Fetching VIIRS satellite data directly from ArcGIS API...\");\n    const response = await fetch(VIIRS_API, {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    const features = data.features || [];\n    const viirsHotspots = [];\n    for (let idx = 0; idx < features.length; idx++) {\n      const val = features[idx];\n      const id = val.id;\n      const props = val.properties;\n      const lat = val.geometry.coordinates[1];\n      const lng = val.geometry.coordinates[0];\n\n      // Check if it's in USA bounds\n      if (!isInUSA(lat, lng)) {\n        continue;\n      }\n      const age = props.hours_old;\n      const intensity = props.frp;\n      const hotspot = {\n        id: id,\n        latitude: lat,\n        longitude: lng,\n        age: age,\n        confidence: null,\n        // VIIRS doesn't have confidence in the original code\n        intensity: intensity,\n        source: \"VIIRS\"\n      };\n      viirsHotspots.push(hotspot);\n    }\n    console.log(`Received ${viirsHotspots.length} VIIRS hotspots`);\n    return viirsHotspots;\n  } catch (error) {\n    console.error('Failed to fetch VIIRS satellite data:', error);\n    throw error;\n  }\n};\nexport const fetchSatelliteData = async satellite => {\n  try {\n    console.log(`Fetching ${satellite} satellite data directly from ArcGIS API...`);\n    let hotspots = [];\n    if (satellite.toLowerCase() === 'modis') {\n      hotspots = await fetchMODISData();\n    } else if (satellite.toLowerCase() === 'viirs') {\n      hotspots = await fetchVIIRSData();\n    } else {\n      throw new Error(`Unknown satellite type: ${satellite}`);\n    }\n    return hotspots;\n  } catch (error) {\n    console.error(`Failed to fetch ${satellite} satellite data:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["MODIS_API","VIIRS_API","headers","isInUSA","lat","lon","fetchMODISData","console","log","response","fetch","method","mode","ok","Error","status","data","json","features","modisHotspots","idx","length","val","id","props","properties","geometry","coordinates","lng","age","HOURS_OLD","confidence","CONFIDENCE","intensity","FRP","hotspot","latitude","longitude","source","push","error","fetchVIIRSData","viirsHotspots","hours_old","frp","fetchSatelliteData","satellite","hotspots","toLowerCase"],"sources":["/Users/timothyha/firecast/frontend/src/services/satelliteApiDirect.js"],"sourcesContent":["// Direct API calls for satellite hotspot data (bypassing Flask backend)\n\nconst MODIS_API = \"https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/MODIS_Thermal_v1/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\";\nconst VIIRS_API = \"https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/Satellite_VIIRS_Thermal_Hotspots_and_Fire_Activity/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson\";\n\nconst headers = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n};\n\nconst isInUSA = (lat, lon) => {\n  return (\n    (24.396308 <= lat && lat <= 49.384358 && -125.0 <= lon && lon <= -66.93457) ||\n    (51.2 <= lat && lat <= 71.5 && -179.15 <= lon && lon <= -129.97) ||\n    (18.5 <= lat && lat <= 22.5 && -160.5 <= lon && lon <= -154.5)\n  );\n};\n\nexport const fetchMODISData = async () => {\n  try {\n    console.log(\"Fetching MODIS satellite data directly from ArcGIS API...\");\n    \n    const response = await fetch(MODIS_API, {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const features = data.features || [];\n    const modisHotspots = [];\n    \n    for (let idx = 0; idx < features.length; idx++) {\n      const val = features[idx];\n      const id = val.id;\n      const props = val.properties;\n      const lat = val.geometry.coordinates[1];\n      const lng = val.geometry.coordinates[0];\n      \n      // Check if it's in USA bounds\n      if (!isInUSA(lat, lng)) {\n        continue;\n      }\n      \n      const age = props.HOURS_OLD;\n      const confidence = props.CONFIDENCE;\n      \n      // Filter by confidence\n      if (confidence < 80) {\n        continue;\n      }\n      \n      const intensity = props.FRP;\n      \n      const hotspot = {\n        id: id,\n        latitude: lat,\n        longitude: lng,\n        age: age,\n        confidence: confidence,\n        intensity: intensity,\n        source: \"MODIS\"\n      };\n      \n      modisHotspots.push(hotspot);\n    }\n    \n    console.log(`Received ${modisHotspots.length} MODIS hotspots`);\n    \n    return modisHotspots;\n    \n  } catch (error) {\n    console.error('Failed to fetch MODIS satellite data:', error);\n    throw error;\n  }\n};\n\nexport const fetchVIIRSData = async () => {\n  try {\n    console.log(\"Fetching VIIRS satellite data directly from ArcGIS API...\");\n    \n    const response = await fetch(VIIRS_API, {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    const features = data.features || [];\n    const viirsHotspots = [];\n    \n    for (let idx = 0; idx < features.length; idx++) {\n      const val = features[idx];\n      const id = val.id;\n      const props = val.properties;\n      const lat = val.geometry.coordinates[1];\n      const lng = val.geometry.coordinates[0];\n      \n      // Check if it's in USA bounds\n      if (!isInUSA(lat, lng)) {\n        continue;\n      }\n      \n      const age = props.hours_old;\n      const intensity = props.frp;\n      \n      const hotspot = {\n        id: id,\n        latitude: lat,\n        longitude: lng,\n        age: age,\n        confidence: null, // VIIRS doesn't have confidence in the original code\n        intensity: intensity,\n        source: \"VIIRS\"\n      };\n      \n      viirsHotspots.push(hotspot);\n    }\n    \n    console.log(`Received ${viirsHotspots.length} VIIRS hotspots`);\n    \n    return viirsHotspots;\n    \n  } catch (error) {\n    console.error('Failed to fetch VIIRS satellite data:', error);\n    throw error;\n  }\n};\n\nexport const fetchSatelliteData = async (satellite) => {\n  try {\n    console.log(`Fetching ${satellite} satellite data directly from ArcGIS API...`);\n    \n    let hotspots = [];\n    \n    if (satellite.toLowerCase() === 'modis') {\n      hotspots = await fetchMODISData();\n    } else if (satellite.toLowerCase() === 'viirs') {\n      hotspots = await fetchVIIRSData();\n    } else {\n      throw new Error(`Unknown satellite type: ${satellite}`);\n    }\n    \n    return hotspots;\n    \n  } catch (error) {\n    console.error(`Failed to fetch ${satellite} satellite data:`, error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}